// Generated by view binder compiler. Do not edit!
package com.example.expensemanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.expensemanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class UpdateDataItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText ammountEdt;

  @NonNull
  public final Button btnUpdUpdate;

  @NonNull
  public final Button btnuPDDelete;

  @NonNull
  public final EditText noteEdt;

  @NonNull
  public final EditText typeEdt;

  private UpdateDataItemBinding(@NonNull LinearLayout rootView, @NonNull EditText ammountEdt,
      @NonNull Button btnUpdUpdate, @NonNull Button btnuPDDelete, @NonNull EditText noteEdt,
      @NonNull EditText typeEdt) {
    this.rootView = rootView;
    this.ammountEdt = ammountEdt;
    this.btnUpdUpdate = btnUpdUpdate;
    this.btnuPDDelete = btnuPDDelete;
    this.noteEdt = noteEdt;
    this.typeEdt = typeEdt;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UpdateDataItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UpdateDataItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.update_data_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UpdateDataItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ammount_edt;
      EditText ammountEdt = ViewBindings.findChildViewById(rootView, id);
      if (ammountEdt == null) {
        break missingId;
      }

      id = R.id.btn_upd_Update;
      Button btnUpdUpdate = ViewBindings.findChildViewById(rootView, id);
      if (btnUpdUpdate == null) {
        break missingId;
      }

      id = R.id.btnuPD_Delete;
      Button btnuPDDelete = ViewBindings.findChildViewById(rootView, id);
      if (btnuPDDelete == null) {
        break missingId;
      }

      id = R.id.note_edt;
      EditText noteEdt = ViewBindings.findChildViewById(rootView, id);
      if (noteEdt == null) {
        break missingId;
      }

      id = R.id.type_edt;
      EditText typeEdt = ViewBindings.findChildViewById(rootView, id);
      if (typeEdt == null) {
        break missingId;
      }

      return new UpdateDataItemBinding((LinearLayout) rootView, ammountEdt, btnUpdUpdate,
          btnuPDDelete, noteEdt, typeEdt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
